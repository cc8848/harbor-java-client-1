/*
 * Harbor API
 * These APIs provide services for manipulating Harbor project.
 *
 * OpenAPI spec version: 1.10.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.RobotAccount;
import io.swagger.client.model.RobotAccountCreate;
import io.swagger.client.model.RobotAccountPostRep;
import io.swagger.client.model.RobotAccountUpdate;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RobotAccountApi
 */
@Ignore
public class RobotAccountApiTest {

    private final RobotAccountApi api = new RobotAccountApi();

    
    /**
     * Get all robot accounts of specified project
     *
     * Get all robot accounts of specified project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectsProjectIdRobotsGetTest() throws ApiException {
        Long projectId = null;
        List<RobotAccount> response = api.projectsProjectIdRobotsGet(projectId);

        // TODO: test validations
    }
    
    /**
     * Create a robot account for project
     *
     * Create a robot account for project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectsProjectIdRobotsPostTest() throws ApiException {
        Long projectId = null;
        RobotAccountCreate robot = null;
        RobotAccountPostRep response = api.projectsProjectIdRobotsPost(projectId, robot);

        // TODO: test validations
    }
    
    /**
     * Delete the specified robot account
     *
     * Delete the specified robot account
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectsProjectIdRobotsRobotIdDeleteTest() throws ApiException {
        Long projectId = null;
        Long robotId = null;
        api.projectsProjectIdRobotsRobotIdDelete(projectId, robotId);

        // TODO: test validations
    }
    
    /**
     * Return the infor of the specified robot account.
     *
     * Return the infor of the specified robot account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectsProjectIdRobotsRobotIdGetTest() throws ApiException {
        Long projectId = null;
        Long robotId = null;
        RobotAccount response = api.projectsProjectIdRobotsRobotIdGet(projectId, robotId);

        // TODO: test validations
    }
    
    /**
     * Update status of robot account.
     *
     * Used to disable/enable a specified robot account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectsProjectIdRobotsRobotIdPutTest() throws ApiException {
        Long projectId = null;
        Long robotId = null;
        RobotAccountUpdate robot = null;
        api.projectsProjectIdRobotsRobotIdPut(projectId, robotId, robot);

        // TODO: test validations
    }
    
}
