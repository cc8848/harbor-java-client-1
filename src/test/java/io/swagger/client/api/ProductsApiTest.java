/*
 * Harbor API
 * These APIs provide services for manipulating Harbor project.
 *
 * OpenAPI spec version: 1.10.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.AccessLog;
import io.swagger.client.model.Action;
import io.swagger.client.model.Action1;
import io.swagger.client.model.AdminJobSchedule;
import io.swagger.client.model.CVEWhitelist;
import io.swagger.client.model.ChartInfoEntry;
import io.swagger.client.model.ChartVersionDetails;
import io.swagger.client.model.ChartVersions;
import io.swagger.client.model.Configurations;
import io.swagger.client.model.ConfigurationsResponse;
import io.swagger.client.model.DetailedTag;
import io.swagger.client.model.EmailServerSetting;
import io.swagger.client.model.Endpoint;
import java.io.File;
import io.swagger.client.model.GCResult;
import io.swagger.client.model.GeneralInfo;
import io.swagger.client.model.HasAdminRole;
import io.swagger.client.model.ImmutableTagRule;
import io.swagger.client.model.InlineResponse200;
import io.swagger.client.model.InputSecret;
import io.swagger.client.model.Label;
import io.swagger.client.model.LdapConf;
import io.swagger.client.model.LdapFailedImportUsers;
import io.swagger.client.model.LdapImportUsers;
import io.swagger.client.model.LdapUsers;
import io.swagger.client.model.Manifest;
import io.swagger.client.model.Namespace;
import io.swagger.client.model.OverallHealthStatus;
import io.swagger.client.model.Password;
import io.swagger.client.model.Permission;
import io.swagger.client.model.Project;
import io.swagger.client.model.ProjectMember;
import io.swagger.client.model.ProjectMemberEntity;
import io.swagger.client.model.ProjectMetadata;
import io.swagger.client.model.ProjectReq;
import io.swagger.client.model.ProjectSummary;
import io.swagger.client.model.PutRegistry;
import io.swagger.client.model.Quota;
import io.swagger.client.model.QuotaSwitcher;
import io.swagger.client.model.QuotaUpdateReq;
import io.swagger.client.model.Registry;
import io.swagger.client.model.RegistryInfo;
import io.swagger.client.model.ReplicationExecution;
import io.swagger.client.model.ReplicationPolicy;
import io.swagger.client.model.ReplicationTask;
import io.swagger.client.model.RepoSignature;
import io.swagger.client.model.Repository;
import io.swagger.client.model.RepositoryDescription;
import io.swagger.client.model.Resource;
import io.swagger.client.model.RetagReq;
import io.swagger.client.model.RetentionExecution;
import io.swagger.client.model.RetentionExecutionTask;
import io.swagger.client.model.RetentionMetadata;
import io.swagger.client.model.RetentionPolicy;
import io.swagger.client.model.RobotAccount;
import io.swagger.client.model.RobotAccountCreate;
import io.swagger.client.model.RobotAccountPostRep;
import io.swagger.client.model.RobotAccountUpdate;
import io.swagger.client.model.RoleRequest;
import io.swagger.client.model.ScannerAdapterMetadata;
import io.swagger.client.model.ScannerRegistration;
import io.swagger.client.model.ScannerRegistrationSettings;
import io.swagger.client.model.Search;
import io.swagger.client.model.StatisticMap;
import io.swagger.client.model.Stats;
import io.swagger.client.model.SystemInfo;
import io.swagger.client.model.User;
import io.swagger.client.model.UserGroup;
import io.swagger.client.model.UserProfile;
import io.swagger.client.model.UserSearch;
import io.swagger.client.model.WebhookJob;
import io.swagger.client.model.WebhookLastTrigger;
import io.swagger.client.model.WebhookPolicy;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProductsApi
 */
@Ignore
public class ProductsApiTest {

    private final ProductsApi api = new ProductsApi();

    
    /**
     * Upload a chart file to the defult &#39;library&#39; project.
     *
     * Upload a chart file to the default &#39;library&#39; project. Uploading together with the prov file at the same time is also supported.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void chartrepoChartsPostTest() throws ApiException {
        File chart = null;
        File prov = null;
        api.chartrepoChartsPost(chart, prov);

        // TODO: test validations
    }
    
    /**
     * Check the health of chart repository service.
     *
     * Check the health of chart repository service.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void chartrepoHealthGetTest() throws ApiException {
        InlineResponse200 response = api.chartrepoHealthGet();

        // TODO: test validations
    }
    
    /**
     * Get all the charts under the specified project
     *
     * Get all the charts under the specified project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void chartrepoRepoChartsGetTest() throws ApiException {
        String repo = null;
        List<ChartInfoEntry> response = api.chartrepoRepoChartsGet(repo);

        // TODO: test validations
    }
    
    /**
     * Delete all the versions of the specified chart
     *
     * Delete all the versions of the specified chart
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void chartrepoRepoChartsNameDeleteTest() throws ApiException {
        String repo = null;
        String name = null;
        api.chartrepoRepoChartsNameDelete(repo, name);

        // TODO: test validations
    }
    
    /**
     * Get all the versions of the specified chart
     *
     * Get all the versions of the specified chart
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void chartrepoRepoChartsNameGetTest() throws ApiException {
        String repo = null;
        String name = null;
        ChartVersions response = api.chartrepoRepoChartsNameGet(repo, name);

        // TODO: test validations
    }
    
    /**
     * Delete the specified chart version
     *
     * Delete the specified chart version
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void chartrepoRepoChartsNameVersionDeleteTest() throws ApiException {
        String repo = null;
        String name = null;
        String version = null;
        api.chartrepoRepoChartsNameVersionDelete(repo, name, version);

        // TODO: test validations
    }
    
    /**
     * Get the specified chart version
     *
     * Get the specified chart version
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void chartrepoRepoChartsNameVersionGetTest() throws ApiException {
        String repo = null;
        String name = null;
        String version = null;
        ChartVersionDetails response = api.chartrepoRepoChartsNameVersionGet(repo, name, version);

        // TODO: test validations
    }
    
    /**
     * Return the attahced labels of chart.
     *
     * Return the attahced labels of the specified chart version.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void chartrepoRepoChartsNameVersionLabelsGetTest() throws ApiException {
        String repo = null;
        String name = null;
        String version = null;
        api.chartrepoRepoChartsNameVersionLabelsGet(repo, name, version);

        // TODO: test validations
    }
    
    /**
     * Remove label from chart.
     *
     * Remove label from the specified chart version.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void chartrepoRepoChartsNameVersionLabelsIdDeleteTest() throws ApiException {
        String repo = null;
        String name = null;
        String version = null;
        Integer id = null;
        api.chartrepoRepoChartsNameVersionLabelsIdDelete(repo, name, version, id);

        // TODO: test validations
    }
    
    /**
     * Mark label to chart.
     *
     * Mark label to the specified chart version.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void chartrepoRepoChartsNameVersionLabelsPostTest() throws ApiException {
        String repo = null;
        String name = null;
        String version = null;
        Label label = null;
        api.chartrepoRepoChartsNameVersionLabelsPost(repo, name, version, label);

        // TODO: test validations
    }
    
    /**
     * Upload a chart file to the specified project.
     *
     * Upload a chart file to the specified project. With this API, the corresponding provance file can be uploaded together with chart file at once.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void chartrepoRepoChartsPostTest() throws ApiException {
        String repo = null;
        File chart = null;
        File prov = null;
        api.chartrepoRepoChartsPost(repo, chart, prov);

        // TODO: test validations
    }
    
    /**
     * Upload a provance file to the specified project.
     *
     * Upload a provance file to the specified project. The provance file should be targeted for an existing chart file.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void chartrepoRepoProvPostTest() throws ApiException {
        String repo = null;
        File prov = null;
        api.chartrepoRepoProvPost(repo, prov);

        // TODO: test validations
    }
    
    /**
     * Get system configurations.
     *
     * This endpoint is for retrieving system configurations that only provides for admin user. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void configurationsGetTest() throws ApiException {
        ConfigurationsResponse response = api.configurationsGet();

        // TODO: test validations
    }
    
    /**
     * Modify system configurations.
     *
     * This endpoint is for modifying system configurations that only provides for admin user. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void configurationsPutTest() throws ApiException {
        Configurations configurations = null;
        api.configurationsPut(configurations);

        // TODO: test validations
    }
    
    /**
     * Test connection and authentication with email server.
     *
     * Test connection and authentication with email server. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void emailPingPostTest() throws ApiException {
        EmailServerSetting settings = null;
        api.emailPingPost(settings);

        // TODO: test validations
    }
    
    /**
     * Health check API
     *
     * The endpoint returns the health stauts of the system. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void healthGetTest() throws ApiException {
        OverallHealthStatus response = api.healthGet();

        // TODO: test validations
    }
    
    /**
     * Enable or disable quota.
     *
     * This endpoint is for enable/disable quota. When quota is disabled, no resource require/release in image/chart push and delete. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void internalSwitchquotaPutTest() throws ApiException {
        QuotaSwitcher switcher = null;
        api.internalSwitchquotaPut(switcher);

        // TODO: test validations
    }
    
    /**
     * Sync quota from registry/chart to DB.
     *
     * This endpoint is for syncing quota usage of registry/chart with database. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void internalSyncquotaPostTest() throws ApiException {
        api.internalSyncquotaPost();

        // TODO: test validations
    }
    
    /**
     * Sync repositories from registry to DB.
     *
     * This endpoint is for syncing all repositories of registry with database. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void internalSyncregistryPostTest() throws ApiException {
        api.internalSyncregistryPost();

        // TODO: test validations
    }
    
    /**
     * List labels according to the query strings.
     *
     * This endpoint let user list labels by name, scope and project_id 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void labelsGetTest() throws ApiException {
        String scope = null;
        String name = null;
        Long projectId = null;
        Integer page = null;
        Integer pageSize = null;
        List<Label> response = api.labelsGet(scope, name, projectId, page, pageSize);

        // TODO: test validations
    }
    
    /**
     * Delete the label specified by ID.
     *
     * Delete the label specified by ID. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void labelsIdDeleteTest() throws ApiException {
        Long id = null;
        api.labelsIdDelete(id);

        // TODO: test validations
    }
    
    /**
     * Get the label specified by ID.
     *
     * This endpoint let user get the label by specific ID. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void labelsIdGetTest() throws ApiException {
        Long id = null;
        Label response = api.labelsIdGet(id);

        // TODO: test validations
    }
    
    /**
     * Update the label properties.
     *
     * This endpoint let user update label properties. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void labelsIdPutTest() throws ApiException {
        Long id = null;
        Label label = null;
        api.labelsIdPut(id, label);

        // TODO: test validations
    }
    
    /**
     * Get the resources that the label is referenced by.
     *
     * This endpoint let user get the resources that the label is referenced by. Only the replication policies are returned for now. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void labelsIdResourcesGetTest() throws ApiException {
        Long id = null;
        Resource response = api.labelsIdResourcesGet(id);

        // TODO: test validations
    }
    
    /**
     * Post creates a label
     *
     * This endpoint let user creates a label. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void labelsPostTest() throws ApiException {
        Label label = null;
        api.labelsPost(label);

        // TODO: test validations
    }
    
    /**
     * Search available ldap groups.
     *
     * This endpoint searches the available ldap groups based on related configuration parameters. support to search by groupname or groupdn. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ldapGroupsSearchGetTest() throws ApiException {
        String groupname = null;
        String groupdn = null;
        List<UserGroup> response = api.ldapGroupsSearchGet(groupname, groupdn);

        // TODO: test validations
    }
    
    /**
     * Ping available ldap service.
     *
     * This endpoint ping the available ldap service for test related configuration parameters. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ldapPingPostTest() throws ApiException {
        LdapConf ldapconf = null;
        api.ldapPingPost(ldapconf);

        // TODO: test validations
    }
    
    /**
     * Import selected available ldap users.
     *
     * This endpoint adds the selected available ldap users to harbor based on related configuration parameters from the system. System will try to guess the user email address and realname, add to harbor user information. If have errors when import user, will return the list of importing failed uid and the failed reason. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ldapUsersImportPostTest() throws ApiException {
        LdapImportUsers uidList = null;
        api.ldapUsersImportPost(uidList);

        // TODO: test validations
    }
    
    /**
     * Search available ldap users.
     *
     * This endpoint searches the available ldap users based on related configuration parameters. Support searched by input ladp configuration, load configuration from the system and specific filter. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ldapUsersSearchGetTest() throws ApiException {
        String username = null;
        List<LdapUsers> response = api.ldapUsersSearchGet(username);

        // TODO: test validations
    }
    
    /**
     * Get recent logs of the projects which the user is a member of
     *
     * This endpoint let user see the recent operation logs of the projects which he is member of 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void logsGetTest() throws ApiException {
        String username = null;
        String repository = null;
        String tag = null;
        String operation = null;
        String beginTimestamp = null;
        String endTimestamp = null;
        Integer page = null;
        Integer pageSize = null;
        List<AccessLog> response = api.logsGet(username, repository, tag, operation, beginTimestamp, endTimestamp, page, pageSize);

        // TODO: test validations
    }
    
    /**
     * List projects
     *
     * This endpoint returns all projects created by Harbor, and can be filtered by project name. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectsGetTest() throws ApiException {
        String name = null;
        Boolean _public = null;
        String owner = null;
        Integer page = null;
        Integer pageSize = null;
        List<Project> response = api.projectsGet(name, _public, owner, page, pageSize);

        // TODO: test validations
    }
    
    /**
     * Check if the project name user provided already exists.
     *
     * This endpoint is used to check if the project name user provided already exist. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectsHeadTest() throws ApiException {
        String projectName = null;
        api.projectsHead(projectName);

        // TODO: test validations
    }
    
    /**
     * Create a new project.
     *
     * This endpoint is for user to create a new project. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectsPostTest() throws ApiException {
        ProjectReq project = null;
        api.projectsPost(project);

        // TODO: test validations
    }
    
    /**
     * Delete project by projectID
     *
     * This endpoint is aimed to delete project by project ID. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectsProjectIdDeleteTest() throws ApiException {
        Long projectId = null;
        api.projectsProjectIdDelete(projectId);

        // TODO: test validations
    }
    
    /**
     * Return specific project detail information
     *
     * This endpoint returns specific project information by project ID. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectsProjectIdGetTest() throws ApiException {
        Long projectId = null;
        Project response = api.projectsProjectIdGet(projectId);

        // TODO: test validations
    }
    
    /**
     * List all immutable tag rules of current project
     *
     * This endpoint returns the immutable tag rules of a project 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectsProjectIdImmutabletagrulesGetTest() throws ApiException {
        Long projectId = null;
        List<ImmutableTagRule> response = api.projectsProjectIdImmutabletagrulesGet(projectId);

        // TODO: test validations
    }
    
    /**
     * Delete the immutable tag rule.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectsProjectIdImmutabletagrulesIdDeleteTest() throws ApiException {
        Long projectId = null;
        Long id = null;
        api.projectsProjectIdImmutabletagrulesIdDelete(projectId, id);

        // TODO: test validations
    }
    
    /**
     * Update the immutable tag rule or enable or disable the rule
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectsProjectIdImmutabletagrulesIdPutTest() throws ApiException {
        Long projectId = null;
        Long id = null;
        ImmutableTagRule immutabletagrule = null;
        api.projectsProjectIdImmutabletagrulesIdPut(projectId, id, immutabletagrule);

        // TODO: test validations
    }
    
    /**
     * Add an immutable tag rule to current project
     *
     * This endpoint add an immutable tag rule to the project 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectsProjectIdImmutabletagrulesPostTest() throws ApiException {
        Long projectId = null;
        ImmutableTagRule immutabletagrule = null;
        api.projectsProjectIdImmutabletagrulesPost(projectId, immutabletagrule);

        // TODO: test validations
    }
    
    /**
     * Get access logs accompany with a relevant project.
     *
     * This endpoint let user search access logs filtered by operations and date time ranges. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectsProjectIdLogsGetTest() throws ApiException {
        Long projectId = null;
        String username = null;
        String repository = null;
        String tag = null;
        String operation = null;
        String beginTimestamp = null;
        String endTimestamp = null;
        Integer page = null;
        Integer pageSize = null;
        List<AccessLog> response = api.projectsProjectIdLogsGet(projectId, username, repository, tag, operation, beginTimestamp, endTimestamp, page, pageSize);

        // TODO: test validations
    }
    
    /**
     * Get all project member information
     *
     * Get all project member information
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectsProjectIdMembersGetTest() throws ApiException {
        Long projectId = null;
        String entityname = null;
        List<ProjectMemberEntity> response = api.projectsProjectIdMembersGet(projectId, entityname);

        // TODO: test validations
    }
    
    /**
     * Delete project member
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectsProjectIdMembersMidDeleteTest() throws ApiException {
        Long projectId = null;
        Long mid = null;
        api.projectsProjectIdMembersMidDelete(projectId, mid);

        // TODO: test validations
    }
    
    /**
     * Get the project member information
     *
     * Get the project member information
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectsProjectIdMembersMidGetTest() throws ApiException {
        Long projectId = null;
        Long mid = null;
        ProjectMemberEntity response = api.projectsProjectIdMembersMidGet(projectId, mid);

        // TODO: test validations
    }
    
    /**
     * Update project member
     *
     * Update project member relationship
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectsProjectIdMembersMidPutTest() throws ApiException {
        Long projectId = null;
        Long mid = null;
        RoleRequest role = null;
        api.projectsProjectIdMembersMidPut(projectId, mid, role);

        // TODO: test validations
    }
    
    /**
     * Create project member
     *
     * Create project member relationship, the member can be one of the user_member and group_member,  The user_member need to specify user_id or username. If the user already exist in harbor DB, specify the user_id,  If does not exist in harbor DB, it will SearchAndOnBoard the user. The group_member need to specify id or ldap_group_dn. If the group already exist in harbor DB. specify the user group&#39;s id,  If does not exist, it will SearchAndOnBoard the group. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectsProjectIdMembersPostTest() throws ApiException {
        Long projectId = null;
        ProjectMember projectMember = null;
        api.projectsProjectIdMembersPost(projectId, projectMember);

        // TODO: test validations
    }
    
    /**
     * Get project metadata.
     *
     * This endpoint returns metadata of the project specified by project ID. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectsProjectIdMetadatasGetTest() throws ApiException {
        Long projectId = null;
        ProjectMetadata response = api.projectsProjectIdMetadatasGet(projectId);

        // TODO: test validations
    }
    
    /**
     * Delete metadata of a project
     *
     * This endpoint is aimed to delete metadata of a project. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectsProjectIdMetadatasMetaNameDeleteTest() throws ApiException {
        Long projectId = null;
        String metaName = null;
        api.projectsProjectIdMetadatasMetaNameDelete(projectId, metaName);

        // TODO: test validations
    }
    
    /**
     * Get project metadata
     *
     * This endpoint returns specified metadata of a project. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectsProjectIdMetadatasMetaNameGetTest() throws ApiException {
        Long projectId = null;
        String metaName = null;
        ProjectMetadata response = api.projectsProjectIdMetadatasMetaNameGet(projectId, metaName);

        // TODO: test validations
    }
    
    /**
     * Update metadata of a project.
     *
     * This endpoint is aimed to update the metadata of a project. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectsProjectIdMetadatasMetaNamePutTest() throws ApiException {
        Long projectId = null;
        String metaName = null;
        api.projectsProjectIdMetadatasMetaNamePut(projectId, metaName);

        // TODO: test validations
    }
    
    /**
     * Add metadata for the project.
     *
     * This endpoint is aimed to add metadata of a project. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectsProjectIdMetadatasPostTest() throws ApiException {
        Long projectId = null;
        ProjectMetadata metadata = null;
        api.projectsProjectIdMetadatasPost(projectId, metadata);

        // TODO: test validations
    }
    
    /**
     * Update properties for a selected project.
     *
     * This endpoint is aimed to update the properties of a project. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectsProjectIdPutTest() throws ApiException {
        Long projectId = null;
        ProjectReq project = null;
        api.projectsProjectIdPut(projectId, project);

        // TODO: test validations
    }
    
    /**
     * Get all robot accounts of specified project
     *
     * Get all robot accounts of specified project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectsProjectIdRobotsGetTest() throws ApiException {
        Long projectId = null;
        List<RobotAccount> response = api.projectsProjectIdRobotsGet(projectId);

        // TODO: test validations
    }
    
    /**
     * Create a robot account for project
     *
     * Create a robot account for project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectsProjectIdRobotsPostTest() throws ApiException {
        Long projectId = null;
        RobotAccountCreate robot = null;
        RobotAccountPostRep response = api.projectsProjectIdRobotsPost(projectId, robot);

        // TODO: test validations
    }
    
    /**
     * Delete the specified robot account
     *
     * Delete the specified robot account
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectsProjectIdRobotsRobotIdDeleteTest() throws ApiException {
        Long projectId = null;
        Long robotId = null;
        api.projectsProjectIdRobotsRobotIdDelete(projectId, robotId);

        // TODO: test validations
    }
    
    /**
     * Return the infor of the specified robot account.
     *
     * Return the infor of the specified robot account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectsProjectIdRobotsRobotIdGetTest() throws ApiException {
        Long projectId = null;
        Long robotId = null;
        RobotAccount response = api.projectsProjectIdRobotsRobotIdGet(projectId, robotId);

        // TODO: test validations
    }
    
    /**
     * Update status of robot account.
     *
     * Used to disable/enable a specified robot account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectsProjectIdRobotsRobotIdPutTest() throws ApiException {
        Long projectId = null;
        Long robotId = null;
        RobotAccountUpdate robot = null;
        api.projectsProjectIdRobotsRobotIdPut(projectId, robotId, robot);

        // TODO: test validations
    }
    
    /**
     * Get scanner registration candidates for configurating project level scanner
     *
     * Retrieve the system configured scanner registrations as candidates of setting project level scanner. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectsProjectIdScannerCandidatesGetTest() throws ApiException {
        Long projectId = null;
        List<ScannerRegistration> response = api.projectsProjectIdScannerCandidatesGet(projectId);

        // TODO: test validations
    }
    
    /**
     * Get project level scanner
     *
     * Get the scanner registration of the specified project. If no scanner registration is configured for the specified project, the system default scanner registration will be returned.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectsProjectIdScannerGetTest() throws ApiException {
        Long projectId = null;
        ScannerRegistration response = api.projectsProjectIdScannerGet(projectId);

        // TODO: test validations
    }
    
    /**
     * Get summary of the project.
     *
     * Get summary of the project.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectsProjectIdSummaryGetTest() throws ApiException {
        Long projectId = null;
        ProjectSummary response = api.projectsProjectIdSummaryGet(projectId);

        // TODO: test validations
    }
    
    /**
     * List project webhook jobs
     *
     * This endpoint returns webhook jobs of a project. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectsProjectIdWebhookJobsGetTest() throws ApiException {
        Long projectId = null;
        Long policyId = null;
        List<WebhookJob> response = api.projectsProjectIdWebhookJobsGet(projectId, policyId);

        // TODO: test validations
    }
    
    /**
     * Get project webhook policy last trigger info
     *
     * This endpoint returns last trigger information of project webhook policy. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectsProjectIdWebhookLasttriggerGetTest() throws ApiException {
        Long projectId = null;
        List<WebhookLastTrigger> response = api.projectsProjectIdWebhookLasttriggerGet(projectId);

        // TODO: test validations
    }
    
    /**
     * List project webhook policies.
     *
     * This endpoint returns webhook policies of a project. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectsProjectIdWebhookPoliciesGetTest() throws ApiException {
        Long projectId = null;
        List<WebhookPolicy> response = api.projectsProjectIdWebhookPoliciesGet(projectId);

        // TODO: test validations
    }
    
    /**
     * Delete webhook policy of a project
     *
     * This endpoint is aimed to delete webhookpolicy of a project. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectsProjectIdWebhookPoliciesPolicyIdDeleteTest() throws ApiException {
        Long projectId = null;
        Long policyId = null;
        api.projectsProjectIdWebhookPoliciesPolicyIdDelete(projectId, policyId);

        // TODO: test validations
    }
    
    /**
     * Get project webhook policy
     *
     * This endpoint returns specified webhook policy of a project. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectsProjectIdWebhookPoliciesPolicyIdGetTest() throws ApiException {
        Long projectId = null;
        Long policyId = null;
        WebhookPolicy response = api.projectsProjectIdWebhookPoliciesPolicyIdGet(projectId, policyId);

        // TODO: test validations
    }
    
    /**
     * Update webhook policy of a project.
     *
     * This endpoint is aimed to update the webhook policy of a project. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectsProjectIdWebhookPoliciesPolicyIdPutTest() throws ApiException {
        Long projectId = null;
        Long policyId = null;
        WebhookPolicy policy = null;
        api.projectsProjectIdWebhookPoliciesPolicyIdPut(projectId, policyId, policy);

        // TODO: test validations
    }
    
    /**
     * Create project webhook policy.
     *
     * This endpoint create a webhook policy if the project does not have one. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectsProjectIdWebhookPoliciesPostTest() throws ApiException {
        Long projectId = null;
        WebhookPolicy policy = null;
        api.projectsProjectIdWebhookPoliciesPost(projectId, policy);

        // TODO: test validations
    }
    
    /**
     * Test project webhook connection
     *
     * This endpoint tests webhook connection of a project. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectsProjectIdWebhookPoliciesTestPostTest() throws ApiException {
        Long projectId = null;
        WebhookPolicy policy = null;
        api.projectsProjectIdWebhookPoliciesTestPost(projectId, policy);

        // TODO: test validations
    }
    
    /**
     * List quotas
     *
     * List quotas
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void quotasGetTest() throws ApiException {
        String reference = null;
        String referenceId = null;
        String sort = null;
        Integer page = null;
        Integer pageSize = null;
        List<Quota> response = api.quotasGet(reference, referenceId, sort, page, pageSize);

        // TODO: test validations
    }
    
    /**
     * Get the specified quota
     *
     * Get the specified quota
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void quotasIdGetTest() throws ApiException {
        Integer id = null;
        Quota response = api.quotasIdGet(id);

        // TODO: test validations
    }
    
    /**
     * Update the specified quota
     *
     * Update hard limits of the specified quota
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void quotasIdPutTest() throws ApiException {
        Integer id = null;
        QuotaUpdateReq hard = null;
        api.quotasIdPut(id, hard);

        // TODO: test validations
    }
    
    /**
     * List registries.
     *
     * This endpoint let user list filtered registries by name, if name is nil, list returns all registries. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void registriesGetTest() throws ApiException {
        String name = null;
        List<Registry> response = api.registriesGet(name);

        // TODO: test validations
    }
    
    /**
     * Delete specific registry.
     *
     * This endpoint is for to delete specific registry. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void registriesIdDeleteTest() throws ApiException {
        Long id = null;
        api.registriesIdDelete(id);

        // TODO: test validations
    }
    
    /**
     * Get registry.
     *
     * This endpoint is for get specific registry.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void registriesIdGetTest() throws ApiException {
        Long id = null;
        Registry response = api.registriesIdGet(id);

        // TODO: test validations
    }
    
    /**
     * Get registry info.
     *
     * Get the info of one specific registry.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void registriesIdInfoGetTest() throws ApiException {
        Long id = null;
        RegistryInfo response = api.registriesIdInfoGet(id);

        // TODO: test validations
    }
    
    /**
     * List namespaces of registry
     *
     * This endpoint let user list namespaces of registry according to query. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void registriesIdNamespaceGetTest() throws ApiException {
        Integer id = null;
        String name = null;
        List<Namespace> response = api.registriesIdNamespaceGet(id, name);

        // TODO: test validations
    }
    
    /**
     * Update a given registry.
     *
     * This endpoint is for update a given registry. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void registriesIdPutTest() throws ApiException {
        Long id = null;
        PutRegistry repoTarget = null;
        api.registriesIdPut(id, repoTarget);

        // TODO: test validations
    }
    
    /**
     * Ping status of a registry.
     *
     * This endpoint checks status of a registry, the registry can be given by ID or URL (together with credential) 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void registriesPingPostTest() throws ApiException {
        Registry registry = null;
        api.registriesPingPost(registry);

        // TODO: test validations
    }
    
    /**
     * Create a new registry.
     *
     * This endpoint is for user to create a new registry. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void registriesPostTest() throws ApiException {
        Registry registry = null;
        api.registriesPost(registry);

        // TODO: test validations
    }
    
    /**
     * List supported adapters.
     *
     * This endpoint let user list supported adapters. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replicationAdaptersGetTest() throws ApiException {
        List<String> response = api.replicationAdaptersGet();

        // TODO: test validations
    }
    
    /**
     * List replication executions.
     *
     * This endpoint let user list replication executions. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replicationExecutionsGetTest() throws ApiException {
        Integer policyId = null;
        String status = null;
        String trigger = null;
        Integer page = null;
        Integer pageSize = null;
        List<ReplicationExecution> response = api.replicationExecutionsGet(policyId, status, trigger, page, pageSize);

        // TODO: test validations
    }
    
    /**
     * Get the execution of the replication.
     *
     * This endpoint is for user to get one execution of the replication. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replicationExecutionsIdGetTest() throws ApiException {
        Long id = null;
        ReplicationExecution response = api.replicationExecutionsIdGet(id);

        // TODO: test validations
    }
    
    /**
     * Stop the execution of the replication.
     *
     * This endpoint is for user to stop one execution of the replication. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replicationExecutionsIdPutTest() throws ApiException {
        Long id = null;
        api.replicationExecutionsIdPut(id);

        // TODO: test validations
    }
    
    /**
     * Get the task list of one execution.
     *
     * This endpoint is for user to get the task list of one execution. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replicationExecutionsIdTasksGetTest() throws ApiException {
        Long id = null;
        List<ReplicationTask> response = api.replicationExecutionsIdTasksGet(id);

        // TODO: test validations
    }
    
    /**
     * Get the log of one task.
     *
     * This endpoint is for user to get the log of one task. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replicationExecutionsIdTasksTaskIdLogGetTest() throws ApiException {
        Long id = null;
        Long taskId = null;
        api.replicationExecutionsIdTasksTaskIdLogGet(id, taskId);

        // TODO: test validations
    }
    
    /**
     * Start one execution of the replication.
     *
     * This endpoint is for user to start one execution of the replication. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replicationExecutionsPostTest() throws ApiException {
        ReplicationExecution execution = null;
        api.replicationExecutionsPost(execution);

        // TODO: test validations
    }
    
    /**
     * List replication policies
     *
     * This endpoint let user list replication policies 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replicationPoliciesGetTest() throws ApiException {
        String name = null;
        Integer page = null;
        Integer pageSize = null;
        List<ReplicationPolicy> response = api.replicationPoliciesGet(name, page, pageSize);

        // TODO: test validations
    }
    
    /**
     * Delete the replication policy specified by ID.
     *
     * Delete the replication policy specified by ID. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replicationPoliciesIdDeleteTest() throws ApiException {
        Long id = null;
        api.replicationPoliciesIdDelete(id);

        // TODO: test validations
    }
    
    /**
     * Get replication policy.
     *
     * This endpoint let user get replication policy by specific ID. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replicationPoliciesIdGetTest() throws ApiException {
        Long id = null;
        ReplicationPolicy response = api.replicationPoliciesIdGet(id);

        // TODO: test validations
    }
    
    /**
     * Update the replication policy
     *
     * This endpoint let user update policy. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replicationPoliciesIdPutTest() throws ApiException {
        Long id = null;
        ReplicationPolicy policy = null;
        api.replicationPoliciesIdPut(id, policy);

        // TODO: test validations
    }
    
    /**
     * Create a replication policy
     *
     * This endpoint let user create a replication policy 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replicationPoliciesPostTest() throws ApiException {
        ReplicationPolicy policy = null;
        api.replicationPoliciesPost(policy);

        // TODO: test validations
    }
    
    /**
     * Get repositories accompany with relevant project and repo name.
     *
     * This endpoint lets user search repositories accompanying with relevant project ID and repo name. Repositories can be sorted by repo name, creation_time, update_time in either ascending or descending order. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesGetTest() throws ApiException {
        Integer projectId = null;
        String q = null;
        String sort = null;
        Integer labelId = null;
        Integer page = null;
        Integer pageSize = null;
        List<Repository> response = api.repositoriesGet(projectId, q, sort, labelId, page, pageSize);

        // TODO: test validations
    }
    
    /**
     * Delete a repository.
     *
     * This endpoint let user delete a repository with name. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesRepoNameDeleteTest() throws ApiException {
        String repoName = null;
        api.repositoriesRepoNameDelete(repoName);

        // TODO: test validations
    }
    
    /**
     * Get labels of a repository.
     *
     * Get labels of a repository specified by the repo_name. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesRepoNameLabelsGetTest() throws ApiException {
        String repoName = null;
        List<Label> response = api.repositoriesRepoNameLabelsGet(repoName);

        // TODO: test validations
    }
    
    /**
     * Delete label from the repository.
     *
     * Delete the label from the repository specified by the repo_name. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesRepoNameLabelsLabelIdDeleteTest() throws ApiException {
        String repoName = null;
        Integer labelId = null;
        api.repositoriesRepoNameLabelsLabelIdDelete(repoName, labelId);

        // TODO: test validations
    }
    
    /**
     * Add a label to the repository.
     *
     * Add a label to the repository. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesRepoNameLabelsPostTest() throws ApiException {
        String repoName = null;
        Label label = null;
        api.repositoriesRepoNameLabelsPost(repoName, label);

        // TODO: test validations
    }
    
    /**
     * Update description of the repository.
     *
     * This endpoint is used to update description of the repository. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesRepoNamePutTest() throws ApiException {
        String repoName = null;
        RepositoryDescription description = null;
        api.repositoriesRepoNamePut(repoName, description);

        // TODO: test validations
    }
    
    /**
     * Get signature information of a repository
     *
     * This endpoint aims to retrieve signature information of a repository, the data is from the nested notary instance of Harbor. If the repository does not have any signature information in notary, this API will return an empty list with response code 200, instead of 404 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesRepoNameSignaturesGetTest() throws ApiException {
        String repoName = null;
        List<RepoSignature> response = api.repositoriesRepoNameSignaturesGet(repoName);

        // TODO: test validations
    }
    
    /**
     * Get tags of a relevant repository.
     *
     * This endpoint aims to retrieve tags from a relevant repository. If deployed with Notary, the signature property of response represents whether the image is singed or not. If the property is null, the image is unsigned. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesRepoNameTagsGetTest() throws ApiException {
        String repoName = null;
        String labelId = null;
        Boolean detail = null;
        List<DetailedTag> response = api.repositoriesRepoNameTagsGet(repoName, labelId, detail);

        // TODO: test validations
    }
    
    /**
     * Retag an image
     *
     * This endpoint tags an existing image with another tag in this repo, source images can be in different repos or projects. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesRepoNameTagsPostTest() throws ApiException {
        String repoName = null;
        RetagReq request = null;
        api.repositoriesRepoNameTagsPost(repoName, request);

        // TODO: test validations
    }
    
    /**
     * Delete a tag in a repository.
     *
     * This endpoint let user delete tags with repo name and tag. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesRepoNameTagsTagDeleteTest() throws ApiException {
        String repoName = null;
        String tag = null;
        api.repositoriesRepoNameTagsTagDelete(repoName, tag);

        // TODO: test validations
    }
    
    /**
     * Get the tag of the repository.
     *
     * This endpoint aims to retrieve the tag of the repository. If deployed with Notary, the signature property of response represents whether the image is singed or not. If the property is null, the image is unsigned. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesRepoNameTagsTagGetTest() throws ApiException {
        String repoName = null;
        String tag = null;
        DetailedTag response = api.repositoriesRepoNameTagsTagGet(repoName, tag);

        // TODO: test validations
    }
    
    /**
     * Get labels of an image.
     *
     * Get labels of an image specified by the repo_name and tag. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesRepoNameTagsTagLabelsGetTest() throws ApiException {
        String repoName = null;
        String tag = null;
        List<Label> response = api.repositoriesRepoNameTagsTagLabelsGet(repoName, tag);

        // TODO: test validations
    }
    
    /**
     * Delete label from the image.
     *
     * Delete the label from the image specified by the repo_name and tag. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesRepoNameTagsTagLabelsLabelIdDeleteTest() throws ApiException {
        String repoName = null;
        String tag = null;
        Integer labelId = null;
        api.repositoriesRepoNameTagsTagLabelsLabelIdDelete(repoName, tag, labelId);

        // TODO: test validations
    }
    
    /**
     * Add a label to image.
     *
     * Add a label to the image. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesRepoNameTagsTagLabelsPostTest() throws ApiException {
        String repoName = null;
        String tag = null;
        Label label = null;
        api.repositoriesRepoNameTagsTagLabelsPost(repoName, tag, label);

        // TODO: test validations
    }
    
    /**
     * Get manifests of a relevant repository.
     *
     * This endpoint aims to retreive manifests from a relevant repository. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesRepoNameTagsTagManifestGetTest() throws ApiException {
        String repoName = null;
        String tag = null;
        String version = null;
        Manifest response = api.repositoriesRepoNameTagsTagManifestGet(repoName, tag, version);

        // TODO: test validations
    }
    
    /**
     * Scan the image.
     *
     * Trigger a scan targeting the artifact identified by the repo_name and tag. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesRepoNameTagsTagScanPostTest() throws ApiException {
        String repoName = null;
        String tag = null;
        api.repositoriesRepoNameTagsTagScanPost(repoName, tag);

        // TODO: test validations
    }
    
    /**
     * Get scan log
     *
     * Get the log text stream for the given artifact and scan action.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesRepoNameTagsTagScanUuidLogGetTest() throws ApiException {
        String repoName = null;
        String tag = null;
        String uuid = null;
        String response = api.repositoriesRepoNameTagsTagScanUuidLogGet(repoName, tag, uuid);

        // TODO: test validations
    }
    
    /**
     * Get public repositories which are accessed most.
     *
     * This endpoint aims to let users see the most popular public repositories 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesTopGetTest() throws ApiException {
        Integer count = null;
        List<Repository> response = api.repositoriesTopGet(count);

        // TODO: test validations
    }
    
    /**
     * Stop a Retention job
     *
     * Stop a Retention job, only support \&quot;stop\&quot; action now.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retentionsIdExecutionsEidPatchTest() throws ApiException {
        Long id = null;
        Long eid = null;
        Action1 action = null;
        api.retentionsIdExecutionsEidPatch(id, eid, action);

        // TODO: test validations
    }
    
    /**
     * Get Retention job tasks
     *
     * Get Retention job tasks, each repository as a task.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retentionsIdExecutionsEidTasksGetTest() throws ApiException {
        Long id = null;
        Long eid = null;
        List<RetentionExecutionTask> response = api.retentionsIdExecutionsEidTasksGet(id, eid);

        // TODO: test validations
    }
    
    /**
     * Get Retention job task log
     *
     * Get Retention job task log, tags ratain or deletion detail will be shown in a table.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retentionsIdExecutionsEidTasksTidGetTest() throws ApiException {
        Long id = null;
        Long eid = null;
        Long tid = null;
        String response = api.retentionsIdExecutionsEidTasksTidGet(id, eid, tid);

        // TODO: test validations
    }
    
    /**
     * Get a Retention job
     *
     * Get a Retention job, job status may be delayed before job service schedule it up.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retentionsIdExecutionsGetTest() throws ApiException {
        Long id = null;
        List<RetentionExecution> response = api.retentionsIdExecutionsGet(id);

        // TODO: test validations
    }
    
    /**
     * Trigger a Retention job
     *
     * Trigger a Retention job, if dry_run is True, nothing would be deleted actually.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retentionsIdExecutionsPostTest() throws ApiException {
        Long id = null;
        Action action = null;
        api.retentionsIdExecutionsPost(id, action);

        // TODO: test validations
    }
    
    /**
     * Get Retention Policy
     *
     * Get Retention Policy.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retentionsIdGetTest() throws ApiException {
        Long id = null;
        RetentionPolicy response = api.retentionsIdGet(id);

        // TODO: test validations
    }
    
    /**
     * Update Retention Policy
     *
     * Update Retention Policy, you can reference metadatas API for the policy model. You can check project metadatas to find whether a retention policy is already binded. This method should only be called when retention policy has already binded to project. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retentionsIdPutTest() throws ApiException {
        Long id = null;
        RetentionPolicy policy = null;
        api.retentionsIdPut(id, policy);

        // TODO: test validations
    }
    
    /**
     * Get Retention Metadatas
     *
     * Get Retention Metadatas.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retentionsMetadatasGetTest() throws ApiException {
        RetentionMetadata response = api.retentionsMetadatasGet();

        // TODO: test validations
    }
    
    /**
     * Create Retention Policy
     *
     * Create Retention Policy, you can reference metadatas API for the policy model. You can check project metadatas to find whether a retention policy is already binded. This method should only be called when no retention policy binded to project yet. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retentionsPostTest() throws ApiException {
        RetentionPolicy policy = null;
        api.retentionsPost(policy);

        // TODO: test validations
    }
    
    /**
     * List scanner registrations
     *
     * Returns a list of currently configured scanner registrations. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void scannersGetTest() throws ApiException {
        List<ScannerRegistration> response = api.scannersGet();

        // TODO: test validations
    }
    
    /**
     * Tests scanner registration settings
     *
     * Pings scanner adapter to test endpoint URL and authorization settings. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void scannersPingPostTest() throws ApiException {
        ScannerRegistrationSettings settings = null;
        api.scannersPingPost(settings);

        // TODO: test validations
    }
    
    /**
     * Get a scanner registration details
     *
     * Retruns the details of the specified scanner registration. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void scannersRegistrationIdGetTest() throws ApiException {
        String registrationId = null;
        ScannerRegistration response = api.scannersRegistrationIdGet(registrationId);

        // TODO: test validations
    }
    
    /**
     * Get the metadata of the specified scanner registration
     *
     * Get the metadata of the specified scanner registration, including the capabilities and customzied properties. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void scannersRegistrationIdMetadataGetTest() throws ApiException {
        String registrationId = null;
        ScannerAdapterMetadata response = api.scannersRegistrationIdMetadataGet(registrationId);

        // TODO: test validations
    }
    
    /**
     * Get the metrics of the latest scan all process
     *
     * Get the metrics of the latest scan all process
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void scansAllMetricsGetTest() throws ApiException {
        Stats response = api.scansAllMetricsGet();

        // TODO: test validations
    }
    
    /**
     * Get the metrics of the latest scheduled scan all process
     *
     * Get the metrics of the latest scheduled scan all process
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void scansScheduleMetricsGetTest() throws ApiException {
        Stats response = api.scansScheduleMetricsGet();

        // TODO: test validations
    }
    
    /**
     * Search for projects, repositories and helm charts
     *
     * The Search endpoint returns information about the projects ,repositories  and helm charts offered at public status or related to the current logged in user. The response includes the project, repository list and charts in a proper display order. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchGetTest() throws ApiException {
        String q = null;
        List<Search> response = api.searchGet(q);

        // TODO: test validations
    }
    
    /**
     * Get projects number and repositories number relevant to the user
     *
     * This endpoint is aimed to statistic all of the projects number and repositories number relevant to the logined user, also the public projects number and repositories number. If the user is admin, he can also get total projects number and total repositories number. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void statisticsGetTest() throws ApiException {
        StatisticMap response = api.statisticsGet();

        // TODO: test validations
    }
    
    /**
     * Get the system level whitelist of CVE.
     *
     * Get the system level whitelist of CVE.  This API can be called by all authenticated users.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systemCVEWhitelistGetTest() throws ApiException {
        CVEWhitelist response = api.systemCVEWhitelistGet();

        // TODO: test validations
    }
    
    /**
     * Update the system level whitelist of CVE.
     *
     * This API overwrites the system level whitelist of CVE with the list in request body.  Only system Admin has permission to call this API.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systemCVEWhitelistPutTest() throws ApiException {
        CVEWhitelist whitelist = null;
        api.systemCVEWhitelistPut(whitelist);

        // TODO: test validations
    }
    
    /**
     * Get gc results.
     *
     * This endpoint let user get latest ten gc results.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systemGcGetTest() throws ApiException {
        List<GCResult> response = api.systemGcGet();

        // TODO: test validations
    }
    
    /**
     * Get gc status.
     *
     * This endpoint let user get gc status filtered by specific ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systemGcIdGetTest() throws ApiException {
        Long id = null;
        GCResult response = api.systemGcIdGet(id);

        // TODO: test validations
    }
    
    /**
     * Get gc job log.
     *
     * This endpoint let user get gc job logs filtered by specific ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systemGcIdLogGetTest() throws ApiException {
        Long id = null;
        String response = api.systemGcIdLogGet(id);

        // TODO: test validations
    }
    
    /**
     * Get gc&#39;s schedule.
     *
     * This endpoint is for get schedule of gc job.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systemGcScheduleGetTest() throws ApiException {
        AdminJobSchedule response = api.systemGcScheduleGet();

        // TODO: test validations
    }
    
    /**
     * Create a gc schedule.
     *
     * This endpoint is for update gc schedule. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systemGcSchedulePostTest() throws ApiException {
        AdminJobSchedule schedule = null;
        api.systemGcSchedulePost(schedule);

        // TODO: test validations
    }
    
    /**
     * Update gc&#39;s schedule.
     *
     * This endpoint is for update gc schedule. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systemGcSchedulePutTest() throws ApiException {
        AdminJobSchedule schedule = null;
        api.systemGcSchedulePut(schedule);

        // TODO: test validations
    }
    
    /**
     * Test the OIDC endpoint.
     *
     * Test the OIDC endpoint, the setting of the endpoint is provided in the request.  This API can only be called by system admin.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systemOidcPingPostTest() throws ApiException {
        Endpoint endpoint = null;
        api.systemOidcPingPost(endpoint);

        // TODO: test validations
    }
    
    /**
     * Get scan_all&#39;s schedule.
     *
     * This endpoint is for getting a schedule for the scan all job, which scans all of images in Harbor.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systemScanAllScheduleGetTest() throws ApiException {
        AdminJobSchedule response = api.systemScanAllScheduleGet();

        // TODO: test validations
    }
    
    /**
     * Create a schedule or a manual trigger for the scan all job.
     *
     * This endpoint is for creating a schedule or a manual trigger for the scan all job, which scans all of images in Harbor. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systemScanAllSchedulePostTest() throws ApiException {
        AdminJobSchedule schedule = null;
        api.systemScanAllSchedulePost(schedule);

        // TODO: test validations
    }
    
    /**
     * Update scan all&#39;s schedule.
     *
     * This endpoint is for updating the schedule of scan all job, which scans all of images in Harbor. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systemScanAllSchedulePutTest() throws ApiException {
        AdminJobSchedule schedule = null;
        api.systemScanAllSchedulePut(schedule);

        // TODO: test validations
    }
    
    /**
     * Get general system info
     *
     * This API is for retrieving general system info, this can be called by anonymous request. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systeminfoGetTest() throws ApiException {
        GeneralInfo response = api.systeminfoGet();

        // TODO: test validations
    }
    
    /**
     * Get default root certificate.
     *
     * This endpoint is for downloading a default root certificate. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systeminfoGetcertGetTest() throws ApiException {
        api.systeminfoGetcertGet();

        // TODO: test validations
    }
    
    /**
     * Get system volume info (total/free size).
     *
     * This endpoint is for retrieving system volume info that only provides for admin user. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systeminfoVolumesGetTest() throws ApiException {
        SystemInfo response = api.systeminfoVolumesGet();

        // TODO: test validations
    }
    
    /**
     * Get all user groups information
     *
     * Get all user groups information
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usergroupsGetTest() throws ApiException {
        List<UserGroup> response = api.usergroupsGet();

        // TODO: test validations
    }
    
    /**
     * Delete user group
     *
     * Delete user group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usergroupsGroupIdDeleteTest() throws ApiException {
        Integer groupId = null;
        api.usergroupsGroupIdDelete(groupId);

        // TODO: test validations
    }
    
    /**
     * Get user group information
     *
     * Get user group information
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usergroupsGroupIdGetTest() throws ApiException {
        Long groupId = null;
        UserGroup response = api.usergroupsGroupIdGet(groupId);

        // TODO: test validations
    }
    
    /**
     * Update group information
     *
     * Update user group information
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usergroupsGroupIdPutTest() throws ApiException {
        Long groupId = null;
        UserGroup usergroup = null;
        api.usergroupsGroupIdPut(groupId, usergroup);

        // TODO: test validations
    }
    
    /**
     * Create user group
     *
     * Create user group information
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usergroupsPostTest() throws ApiException {
        UserGroup usergroup = null;
        api.usergroupsPost(usergroup);

        // TODO: test validations
    }
    
    /**
     * Get current user info.
     *
     * This endpoint is to get the current user information. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersCurrentGetTest() throws ApiException {
        User response = api.usersCurrentGet();

        // TODO: test validations
    }
    
    /**
     * Get current user permissions.
     *
     * This endpoint is to get the current user permissions. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersCurrentPermissionsGetTest() throws ApiException {
        String scope = null;
        Boolean relative = null;
        List<Permission> response = api.usersCurrentPermissionsGet(scope, relative);

        // TODO: test validations
    }
    
    /**
     * Get registered users of Harbor.
     *
     * This endpoint is for user to search registered users, support for filtering results with username.Notice, by now this operation is only for administrator. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersGetTest() throws ApiException {
        String username = null;
        String email = null;
        Integer page = null;
        Integer pageSize = null;
        List<User> response = api.usersGet(username, email, page, pageSize);

        // TODO: test validations
    }
    
    /**
     * Creates a new user account.
     *
     * This endpoint is to create a user if the user does not already exist. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersPostTest() throws ApiException {
        User user = null;
        api.usersPost(user);

        // TODO: test validations
    }
    
    /**
     * Search users by username
     *
     * This endpoint is to search the users by username. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersSearchGetTest() throws ApiException {
        String username = null;
        Integer page = null;
        Integer pageSize = null;
        List<UserSearch> response = api.usersSearchGet(username, page, pageSize);

        // TODO: test validations
    }
    
    /**
     * Set CLI secret for a user.
     *
     * This endpoint let user generate a new CLI secret for himself.  This API only works when auth mode is set to &#39;OIDC&#39;. Once this API returns with successful status, the old secret will be invalid, as there will be only one CLI secret for a user. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersUserIdCliSecretPutTest() throws ApiException {
        Integer userId = null;
        InputSecret inputSecret = null;
        api.usersUserIdCliSecretPut(userId, inputSecret);

        // TODO: test validations
    }
    
    /**
     * Mark a registered user as be removed.
     *
     * This endpoint let administrator of Harbor mark a registered user as be removed.It actually won&#39;t be deleted from DB. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersUserIdDeleteTest() throws ApiException {
        Integer userId = null;
        api.usersUserIdDelete(userId);

        // TODO: test validations
    }
    
    /**
     * Get a user&#39;s profile.
     *
     * Get user&#39;s profile with user id. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersUserIdGetTest() throws ApiException {
        Integer userId = null;
        User response = api.usersUserIdGet(userId);

        // TODO: test validations
    }
    
    /**
     * Change the password on a user that already exists.
     *
     * This endpoint is for user to update password. Users with the admin role can change any user&#39;s password. Guest users can change only their own password. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersUserIdPasswordPutTest() throws ApiException {
        Integer userId = null;
        Password password = null;
        api.usersUserIdPasswordPut(userId, password);

        // TODO: test validations
    }
    
    /**
     * Update a registered user to change his profile.
     *
     * This endpoint let a registered user change his profile. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersUserIdPutTest() throws ApiException {
        Integer userId = null;
        UserProfile profile = null;
        api.usersUserIdPut(userId, profile);

        // TODO: test validations
    }
    
    /**
     * Update a registered user to change to be an administrator of Harbor.
     *
     * This endpoint let a registered user change to be an administrator of Harbor. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersUserIdSysadminPutTest() throws ApiException {
        Integer userId = null;
        HasAdminRole hasAdminRole = null;
        api.usersUserIdSysadminPut(userId, hasAdminRole);

        // TODO: test validations
    }
    
}
